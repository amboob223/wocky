import React, { useState } from "react";
import axios from 'axios';
import CarouselFadeExample from './CarouselFadeExample';

const Signup = () =>{
  //use state to adjust all the from stuff
  const [formData,setFormData] = useState({
    username:"",
    address:"",
    ipfshash:""
  })

  const handleInputChange = (e)=>{
    const {name,value} = e.target;
    setFormData({
      ...formData,
      [name]:value
    });
  };

    const handlePhotoUpload = (event) => {
    const uploadedPhoto = event.target.files[0];
    setPhoto(uploadedPhoto);
  };

  const handleSubmit = () => {
    console.log("Photo:", photo);
    console.log("Username:", username);
  };


  const connectMetamask = async () => {
  if (window.ethereum) {
    try {
      const accounts = await window.ethereum.request({ method: 'eth_requestAccounts' });
      const account = accounts[0];
     setAddress(account)

  } catch {
    console.log("MetaMask not detected.");
  }}
}


  const handleSubmit = async (e) =>{
    try {
      e.preventDefault();
      console.log(formData)
      const response = await fetch(`https://localhost:3000/signup`,{
        method:"POST",
        headers:{"Content-Type":"application/json"},
        body:JSON.stringify(formData)
      })

      if(response.ok){
        console.log("form went through")
        alert("You good bro")
      }else{
        console.error("form submission failerd",response.statusText);
      }
    } catch (error) {
      console.error("error submit form", error.message)

    }
    
  }

  return(<div>
 <>

<div className="help-container">

  
  
    <section>
  <h2>Econsensus helps with..</h2>

 

  <h3>Elevated Decision-Making through Data-Driven Insights</h3>
<div>
   <p>
Our services are designed to empower your company, fostering innovation, efficiency, and sustained success in today's dynamic market.
    Please feel free to complete the form and a representative will be with you shortly.
  </p>
</div>
 
  
      
      
</section>


    <form onSubmit={handleSubmit}>
      <h1> Let us Help </h1>
        <div className="form-group">
          <label htmlFor="name">Name:</label>
          <input
            type="text"
            name="name"
            className="form-control"
            id="name"
            value={formData.username}
            onChange={handleInputChange}
            placeholder="Name"
          />
        </div>
         <div className="form-group">
          <label htmlFor="wallet">Wallet:</label>
           <button onClick={connectMetamask}>Connect</button> {/* Call connectMetamask prop function */}
      <h1>{address}</h1>
        </div>
         <div className="form-group">
          <label htmlFor="name">Name:</label>
          <input
            type="file"
            name="name"
            className="form-control"
            id="name"
            value={formData.username}
            onChange={handleInputChange}
            placeholder="Name"
          />
        </div>
        
       <label>
        Upload Photo:
        <input type="file" onChange={handlePhotoUpload} />
      </label>
        <button  className = "btn btn-warning" type="submit" id="btn">
          Submit
        </button>
      </form>
      </div>
    </>



  </div>)

}


export default Signup;



import React, { useState } from "react";
import axios from 'axios';
import CarouselFadeExample from './CarouselFadeExample';

const Signup = ({, setReviews }) => {
  const [username, setUsername] = useState('');
  const [address, setAddress] = useState("");
  const [ipfsHash, setIpfsHash] = useState("");
  const [addressToHashMap, setAddressToHashMap] = useState({}); // Define addressToHashMap state
  const [ipfsHashArray, setIpfsHashArray] = useState([]); // Array to store IPFS hashes

  const connectMetamask = async () => {
    if (window.ethereum) {
      try {
        const accounts = await window.ethereum.request({ method: 'eth_requestAccounts' });
        const account = accounts[0];
        setAddress(account);
        if (addressToHashMap[account]) {
          setIpfsHash(addressToHashMap[account]);
        } else {
          setIpfsHash(ipfsHash);
        }
      } catch {
        console.log("MetaMask not detected.");
      }
    }
  }

const handlePhotoUpload = async (event) => {
  try {
    const uploadedPhoto = event.target.files[0];
    const formData = new FormData();
    formData.append('file', uploadedPhoto);
    formData.append('pinataOptions', '{"cidVersion": 0}');
    formData.append('pinataMetadata', `{"name": "${username}"}`);

    const response = await axios.post('https://api.pinata.cloud/pinning/pinFileToIPFS', formData, {
      headers: {
        'Content-Type': 'multipart/form-data',
        'Authorization': `eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySW5mb3JtYXRpb24iOnsiaWQiOiIwNjQ2YmM0MS00YTc3LTRjMjItYTRjYS1hZmY5MWFiOGI0M2MiLCJlbWFpbCI6Im1vbms4ODk2QGdtYWlsLmNvbSIsImVtYWlsX3ZlcmlmaWVkIjp0cnVlLCJwaW5fcG9saWN5Ijp7InJlZ2lvbnMiOlt7ImlkIjoiRlJBMSIsImRlc2lyZWRSZXBsaWNhdGlvbkNvdW50IjoxfSx7ImlkIjoiTllDMSIsImRlc2lyZWRSZXBsaWNhdGlvbkNvdW50IjoxfV0sInZlcnNpb24iOjF9LCJtZmFfZW5hYmxlZCI6ZmFsc2UsInN0YXR1cyI6IkFDVElWRSJ9LCJhdXRoZW50aWNhdGlvblR5cGUiOiJzY29wZWRLZXkiLCJzY29wZWRLZXlLZXkiOiI1MTA3M2M3NGZmMmZjODMyMDhjYiIsInNjb3BlZEtleVNlY3JldCI6ImE2YTY3NjQwMmQ3MzI4MTVmYTgzOWI0MGVhMzFjMDlhMWQyNjJhZWQyMmY1OWJkZWNmOTA0OTBhNmQ3OTkyNjAiLCJpYXQiOjE3MTI2NTQ2Mjd9.kBC7EeGHaXaxBOa-sNBao9Tg1Mggom-vAhQmNwyea88


`
      }
    });

    if (response.data && response.data.IpfsHash) {
      console.log('File uploaded successfully:', response.data.IpfsHash);
      const newIpfsHash = response.data.IpfsHash;
      setIpfsHash(newIpfsHash);
      setAddressToHashMap({ ...addressToHashMap, [address]: newIpfsHash });
      const newIpfsHashArray = [...ipfsHashArray, newIpfsHash];
      setIpfsHashArray(newIpfsHashArray);
      console.log('Updated IPFS Hash Array:', newIpfsHashArray);
    } else {
      console.error('Error uploading file to IPFS: Invalid response');
    }
  } catch (error) {
    console.error('Error uploading file to IPFS:', error);
  }
};

const handleSubmit = async (event) => {
  event.preventDefault();

  try {
    const formData = {
      username: username,
      address: address,
      ipfsHash: ipfsHashArray // Sending the array of IPFS hashes
    };
    console.log('Submitting form data to the backend:', formData);

    const response = await axios.post('https://api.pinata.cloud/pinning/pinFileToIPFS', formData, {
      headers: {
        'Content-Type': 'application/json',
        'Authorization': `Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySW5mb3JtYXRpb24iOnsiaWQiOiIwNjQ2YmM0MS00YTc3LTRjMjItYTRjYS1hZmY5MWFiOGI0M2MiLCJlbWFpbCI6Im1vbms4ODk2QGdtYWlsLmNvbSIsImVtYWlsX3ZlcmlmaWVkIjp0cnVlLCJwaW5fcG9saWN5Ijp7InJlZ2lvbnMiOlt7ImlkIjoiRlJBMSIsImRlc2lyZWRSZXBsaWNhdGlvbkNvdW50IjoxfSx7ImlkIjoiTllDMSIsImRlc2lyZWRSZXBsaWNhdGlvbkNvdW50IjoxfV0sInZlcnNpb24iOjF9LCJtZmFfZW5hYmxlZCI6ZmFsc2UsInN0YXR1cyI6IkFDVElWRSJ9LCJhdXRoZW50aWNhdGlvblR5cGUiOiJzY29wZWRLZXkiLCJzY29wZWRLZXlLZXkiOiI1MTA3M2M3NGZmMmZjODMyMDhjYiIsInNjb3BlZEtleVNlY3JldCI6ImE2YTY3NjQwMmQ3MzI4MTVmYTgzOWI0MGVhMzFjMDlhMWQyNjJhZWQyMmY1OWJkZWNmOTA0OTBhNmQ3OTkyNjAiLCJpYXQiOjE3MTI2NTQ2Mjd9.kBC7EeGHaXaxBOa-sNBao9Tg1Mggom-vAhQmNwyea88`
      }
    });

    console.log('Form data submitted successfully:', response.data);

    // Clear form fields and reset states
    setUsername('');
    setAddress('');
    setIpfsHash('');
    setIpfsHashArray([]);
  } catch (error) {
    console.error('Error submitting form data:', error);
  }
};


  const handleUsernameChange = (event) => {
    setUsername(event.target.value);
  };




  return (
    <div>
      <h2>Signup</h2>
      <form onSubmit={handleSubmit}>
        <label>
          Upload Photo:
          <input type="file" onChange={handlePhotoUpload} />
        </label>
        <br />
        <label>
          Make a Username:
          <input type="text" value={username} onChange={handleUsernameChange} />
        </label>
        <br />
        <button onClick={connectMetamask}>Connect Wallet</button>
        <br />
        <h1>{address}</h1>
        <p>{ipfsHash}</p>
        <CarouselFadeExample addresses={ipfsHashArray} ipfsHash={ipfsHash} setSelectedAddress={setSelectedAddress} setReviews={setReviews} />
        <button type="submit">Submit</button>
      </form>
    </div>
  );

};

export default Signup;


eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySW5mb3JtYXRpb24iOnsiaWQiOiIwNjQ2YmM0MS00YTc3LTRjMjItYTRjYS1hZmY5MWFiOGI0M2MiLCJlbWFpbCI6Im1vbms4ODk2QGdtYWlsLmNvbSIsImVtYWlsX3ZlcmlmaWVkIjp0cnVlLCJwaW5fcG9saWN5Ijp7InJlZ2lvbnMiOlt7ImlkIjoiRlJBMSIsImRlc2lyZWRSZXBsaWNhdGlvbkNvdW50IjoxfSx7ImlkIjoiTllDMSIsImRlc2lyZWRSZXBsaWNhdGlvbkNvdW50IjoxfV0sInZlcnNpb24iOjF9LCJtZmFfZW5hYmxlZCI6ZmFsc2UsInN0YXR1cyI6IkFDVElWRSJ9LCJhdXRoZW50aWNhdGlvblR5cGUiOiJzY29wZWRLZXkiLCJzY29wZWRLZXlLZXkiOiI1MTA3M2M3NGZmMmZjODMyMDhjYiIsInNjb3BlZEtleVNlY3JldCI6ImE2YTY3NjQwMmQ3MzI4MTVmYTgzOWI0MGVhMzFjMDlhMWQyNjJhZWQyMmY1OWJkZWNmOTA0OTBhNmQ3OTkyNjAiLCJpYXQiOjE3MTI2NTQ2Mjd9.kBC7EeGHaXaxBOa-sNBao9Tg1Mggom-vAhQmNwyea88`
        }